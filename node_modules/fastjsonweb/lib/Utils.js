var fs = require('fs');
var Utils = function(){};
//     uuid.js
//
//     (c) 2010-2012 Robert Kieffer
//     MIT License
//     https://github.com/broofa/node-uuid
Object.defindProperty(Utils,"getUUID",{
	value:function(){
		var  _rnds = new Array(16);
		var rnds = (function() {
			for (var i = 0, r; i < 16; i++) {
				if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
				_rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
			}
			return _rnds;
		})();
		rnds[6] = (rnds[6] & 0x0f) | 0x40;
		rnds[8] = (rnds[8] & 0x3f) | 0x80;
		var _byteToHex = [];
		for (var i = 0; i < 256; i++) {
			_byteToHex[i] = (i + 0x100).toString(16).substr(1);
		}
		var d = (function(buf) {
			var i = 0;
			var bth = _byteToHex;
			return  bth[buf[i++]] + bth[buf[i++]] +
					bth[buf[i++]] + bth[buf[i++]] + '-' +
					bth[buf[i++]] + bth[buf[i++]] + '-' +
					bth[buf[i++]] + bth[buf[i++]] + '-' +
					bth[buf[i++]] + bth[buf[i++]] + '-' +
					bth[buf[i++]] + bth[buf[i++]] +
					bth[buf[i++]] + bth[buf[i++]] +
					bth[buf[i++]] + bth[buf[i++]];
		})(rnds);
		return d;
	}
});

//return a json object by  reading similar '*.json' file
//if file is not  exists  ,throw a Error
Object.defindProperty(Utils,"readJson",{
	value:function(path){
		var isConfigure = fs.existsSync(path);
		if(!isConfigure){
			throw new Error(path + " isn't exists.");
		}
		return; 
	}
});


module.exports = Utils;