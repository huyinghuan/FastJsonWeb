//Initilze some date and check the configure files
var fs =  require('fs');
var path = require('path');
var APPROOT = process.cwd();
var Utils = require('./Utils');
//return a json object by  reading similar '*.json' file


var InitilazeList = function(){};

//Extends some Object ,for example,the Date.format and so on.
Object.defineProperty(InitilazeList,"ExtendsObject",{
	value:function(){
		require("./ObjectExtends");
	},
	enumerable:true
});

//Check whether there is a mistake in handle.json
Object.defineProperty(InitilazeList,"CheckHandle",{
	value:function(){
		//check whether theres is a  configure.json on appliactions root
		// (Note : the configure.json is NOT the  modules/fastjsonweb's  assets/DefaultConfigure.json)
		var configurePath = path.join(APPROOT,"configure.json");

		var isConfigure = fs.existsSync(configurePath);
		var reg = "(/\\\*([^*]|[\\\r\\\n]|(\\\*+([^*/]|[\\\r\\\n])))*\\\*+/)|(//.*)";
		var exp = new RegExp(reg,"g");
		// exists configure.json
		var handle = "handle.json";
		if(isConfigure){
			//judge whether config the handle?
			var configure = Utils.readJson(configurePath);
			//the handle configure is exists
			if(configure && handle = configure.handle){
				var handlePath =path.join(APPROOT,handle);
				var isHandle = fs.existsSync(handlePath);
				if(!isHandle || fs.stat(handlePath).isDirectory()){
					throw new Error("router handle "+ handle +"is a directory or not exists");
				}
				return Utils.readJson(handlePath);
			}
		}
	},
	enumerable:true
});


Object.defineProperty(InitilazeList,"test",{
	value:function(){
		var p = require("./ConfigHelper").getAssetsPath("testComment.json");
		var str =  fs.readFileSync(p,{encoding:"utf-8"});
		var reg = "(/\\\*([^*]|[\\\r\\\n]|(\\\*+([^*/]|[\\\r\\\n])))*\\\*+/)|(//.*)";
		var exp = new RegExp(reg,"g");
		str =  str.replace(exp,"");
		var obj = JSON.parse(str);
		console.log(str);
		console.log(obj.hello);
	},
	enumerable:true
});



var Initilaze = function(){};
Object.defineProperty(Initilaze,"init",{
	value:function(){
		for(prop in InitilazeList){
			InitilazeList[prop]();
		}
	}
});

module.exports = Initilaze;