//Initilze some date and check the configure files
var fs =  require('fs');
var path = require('path');
var Utils = require('./utils/Utils');
//Define Some value;
//var _APPROOT = process.cwd();
//var _handleFileName = "handle.json";


var InitilazeList = function(){};

Object.defineProperty(InitilazeList,"_APPROOT",{
	value:process.cwd()
});

Object.defineProperty(InitilazeList,"_DEFAULTHANDLEFILENAME",{
	value:"handle.json"
});


//Extends some Object ,for example,the Date.format and so on.
Object.defineProperty(InitilazeList,"ExtendsObject",{
	value:function(){
		require("./ObjectExtends");
	},
	enumerable:true
});

//Check whether there is a mistake in handle.json
Object.defineProperty(InitilazeList,"CheckHandle",{
	value:function(){
		//check whether theres is a  configure.json on appliactions root
		// (Note : the configure.json is NOT the  modules/fastjsonweb's  assets/DefaultConfigure.json)
		var configurePath = path.join(this._APPROOT,"configure.json");
		var isConfigure = fs.existsSync(configurePath);
		var handle = this._DEFAULTHANDLEFILENAME;
		var configure = {};
		var handlePath;
		//judge whether config the handle? Does the handle configure  exists ? Is the handl configure  a string ?
		if(isConfigure && (configure =  Utils.readJson(configurePath))){
			var routerConfigeFileName = configure.handle;
			if(routerConfigeFileName && typeof(routerConfigeFileName) !== "string"){
				throw new Error("handle configure '"+configure.handle+"' is a invalid value,it must be a string in 'configure.json' file");
			}
			handle = routerConfigeFileName ? routerConfigeFileName : handle;
		}
		 //if configure.json is not exist,read the default handle.json
		handlePath =path.join(this._APPROOT,handle);
		//Is  configure exist ? Is configure  a file not a directory? 
		if(!fs.existsSync(handlePath) || fs.statSync(handlePath).isDirectory()){
			throw new Error("router handle '"+ handle +"' is a directory or not exist");
		}
		return Utils.readJson(handlePath);
	},
	enumerable:true
});


var Initilaze = function(){};
Object.defineProperty(Initilaze,"init",{
	value:function(){
		for(prop in InitilazeList){
			InitilazeList[prop]();
		}
	}
});

module.exports = Initilaze;