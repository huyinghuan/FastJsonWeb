/**
请求过滤器 完成静态文件路径判断，类属性注入，和 请求横向拦截功能
 =======================================================
 1.改变类方法的调用方式，采用call函数进行上下文调用
 2.取消object_inversion的引用
 3.增加post数据接受 并与 url数据 进行合并 构成上下文 
 via : ec.huyinghuan@gmail.com  Date: 2013.02.17
 
*/
var  EventEmitter = require('events').EventEmitter;
var url = require('url');
var router = require('./router');
var ioc = require('./property_injection');
var StaticResource = require("./static_resource");
var querystring = require('querystring'); 
//var UUID = require("./uuid");
var FilterList = require("./filterlist");
var NewResponse = require("./NewResponse");

function begin(request,response){
  if(url.parse(request.url).pathname !=="/favicon.ico"){
      FilterList.definedFilterList(request,response,function(){
        doFirst(request,response);
      });
  }else{
      doFirst(request,response);
  }
 
}

function doFirst(request,response){
  var pathname = url.parse(request.url).pathname;
  if(router.isStaticResorce(pathname) || pathname==="/favicon.ico"){
      var action = new StaticResource();
      action.execute(request,response);
      return;
  }
  doMain(request,response);
}

function doMain(request,response){
	FilterList.filterlist(request,response,function(){
    doLast(request,response);
  });
}

function doLast(request,response){
	var pathname = url.parse(request.url).pathname;
	var postParameter='';
	request.setEncoding("UTF-8");//不设置则为buffer
	request.on('data', function(chunk){
        postParameter += chunk;  //获取post数据
	});
	request.on('end',function(){
		postParameter = querystring.parse(postParameter); //post数据对象化
		postParameter = ioc.parameterToObject(postParameter);//post对象 转 上下文对象
		var urlParameter = url.parse(request.url,true).query;//获取url中的查询参数
		var parameterObj = ioc.parameterToObject(urlParameter); //将查询参数 转成 url上下文对象；
		parameterObj  = ioc.unionObject(parameterObj,postParameter); //合成 url上下文对象和post上下文对象
		var Action = router.route(pathname); //根据url 获取映射 处理Action
		var ActionObject  = Action['object']; //获取 类
		var method = Action['method']; //获取 方法
		var action = new ActionObject(); 
		var execute  = action[method];
		if(!execute || (typeof execute != "function")){  //判断调用方法是否存在
			errorMessage = "ERROR:"+pathname.substr(pathname.lastIndexOf('\/')+1,pathname.length)+"'s method \'"+Action["method"]+"\' is not exists";
			console.log(errorMessage);
			response.writeHead(500, {
				'Content-Length': errorMessage.length,
				'Content-Type': 'text/plain' 
			});
			response.write(errorMessage);
			response.end();
			return;
		}
		execute.call(parameterObj,request,new NewResponse(response));//call函数 设置 方法的上下文
    });
}
exports.doFilter = begin;
