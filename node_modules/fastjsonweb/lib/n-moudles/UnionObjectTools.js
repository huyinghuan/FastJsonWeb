module.exports = (function(){
    var ObjectType = require('./ObjecType');

    /**
     * 合并两个普通json 对象,当属性名相同 优先赋值指定条件参数的值
     * 此方法私有.
     * 但将定义在UnionObjectTools.__extra_protype.unionJSONObject上
     * @firstObj  JSONObject eg. {a:1,"b.c":2,d:3} needed
     * @secondObj JSONObject eg  {a:2,"b.c":4,f:4} needed
     * @fn  Function 当属性名相同 制定优先赋值的条件.接受两个参数 optional
     *          两个参数分别是firstObj,secondObj 相同属性的值.需要返回一个数据.
     *      eg. function(first,second){return first > second ? first : second}
     *      如果不指定,则默认给相同的属性 复制第一个对象的值.
     * return eg.  {a:1,"b.c":2,d:3,f:4}
     */
    var unionJSONObject = function(firstObj,secondObj,fn){
        fn = fn || function(first){return first};
        if(ObjectType.isEmptyObject(secondObj)){
            return firstObj;
        }
        if(ObjectType.isEmptyObject(firstObj)){
            return secondObj;
        }
        for(var x in secondObj){
            if(!(x in firstObj)){
                firstObj[x] = secondObj[x];
            }
            firstObj[x] = fn(firstObj[x],secondObj[x]);
        }
        return firstObj;
    }

    /**
     *比较参数类型.返回优先级别高的参数
     *此方法私有.
     *但将定义在UnionObjectTools.__extra_protype.getHightObject上
     *参数类型相同时：
         参数为数组时则取合集
         参数为对象时 继续求合集
         其他类型 返回第一个
     *参数类型不同时：
         一个为数组一个为对象时，返回 对象
         -个为数组 一个为单个数据元素时,返回数组.
         两个参数 既非数组又非对象时（包括数字，boolea值，Date等）返回第一个
     */
    var getHightObject=function(firstObj,secondObj){
        if(ObjectType.isSameObjectType(firstObj,secondObj)){
            if(ObjectType.isArray(firstObj)){
                return firstObj.concat(secondObj);
            }
            if(ObjectType.isObject(firstObj)){
                return unionJSONObject(firstObj,secondObj);
            }
            return firstObj ;
        }
        if(ObjectType.isObject(firstObj)){
            return firstObj;
        }
        if(ObjectType.isObject(secondObj)){
            return secondObj;
        }
        if(ObjectType.isArray(firstObj)){
            return firstObj;
        }
        if(ObjectType.isArray(secondObj)){
            return secondObj;
        }
        return firstObj;
    }

    /**
     * 拆分一个对象.遍历每一个属性.
     * 此方法私有.但将定义在UnionObjectTools.__extra_protype.getHightObject上
     * 如属性名具有格式化成对象的特征(比如其中含有' . ',这将认为这是一个复合属性)则将其格式化.
     * 如果不具体有该特征,则将这些不具备格式化特征的属性组合成一个单独对象存入数组.
     * 所有属性拆分成对象后,以数组返回
     * @paramter
     *      object   eg. {a.b.c.d:3,b.c.d:2,b:1,c:2}
     * return
     *      Array<Object>:[{a:{b:{c:{d:3}}}},{b:{c:{d:2}}},{b:1,c:2}]
     * */
    var propertyToObject = function (obj){
        var singleObject   = {};
        if(ObjectType.isEmptyObject(obj)){
            return singleObject;
        }
        var arrObject = new Array();
        for(var parameterName in obj){
            var index = parameterName.indexOf('\.');
            var parameterValue = parameter[parameterName];
            if( index == -1){
                singleObject[parameterName] = parameterValue;
                continue;
            }
            arrObject.push(stringToObject(parameterName,parameterValue));
        }

        arrObject.push(singleObject);
        return arrObject;
    }

    /**
     *字符串转对对象
     *此方法私有.
     *但将定义在UnionObjectTools.__extra_protype.getHightObject上
     *  @parame
     *      name   String   eg. "a.b.c.d"
     *      value  String or number or other.  eg. "1"
     *  return
     *      {b:{c:{d:"1"}}}
     * Note: 当属性中连续存在2个或者多个'.'时,将自动合并成一个. 如果当属性的第一个字符或者最后一个字符
     * 为'.'时,将自动删除.
     **/
    var stringToObject = function(str,value){
        str = str.replace(/\.+/g,'\.').replace(/^\.|\.$/g,''); //去掉重复‘.’和首尾'.'
        var arr = str.split('\.');
        var property;
        while(property = arr.pop()){
            var object = {};
            object[property] = value;
            value = object;
        }
        return object;
    }


    /**
     * 合并一组普通json对象
     * 此方法私有.
     * 但将定义在UnionObjectTools.__extra_protype.unionJSONObjectArray
     * @jsonObjectArray  object array
     * return Object
     */
    var unionJSONObjectArray = function(jsonObjectArray){
        if(!jsonObjectArray || jsonObjectArray.length == 0){
            return {};
        }
        if(jsonObjectArray.length == 1){
            return jsonObjectArray[0];
        }
        var length = jsonObjectArray.length;
        var objs = new Array();
        for(var i = 0;i < length - 1;i = i+2){
            objs.push(unionJSONObject(jsonObjectArray[i],jsonObjectArray[i+1],getHightObject));
        }
        if(length%2 != 0){
            objs.push(unionJSONObject[length-1]);
        }
        return unionJSONObjectArray(objs);
    }

    /**
     * 合并两个复杂对象
     * 此方法公开
     **/
    var unionComplexObject = function(firstObj,secondObj){
        //第一步.当作简化对象合并.减少属性对象化的迭代次数.
        var jsonObject = unionJSONObject(firstObj,secondObj);
        //第二步拆分对象属性为数组
        var jsonObjectPropertyArray = propertyToObject(jsonObject);
        //合并数组
        return unionJSONObjectArray(jsonObjectPropertyArray);
    }

    return {
        "unionComplexObject":unionComplexObject,
        "__extra_protype":{
            "stringToObject":stringToObject,
            "unionJSONObject":unionJSONObject,
            "getHightObject":getHightObject,
            "propertyToObject":propertyToObject,
            "unionJSONObjectArray":unionJSONObjectArray
        }
    };
})();