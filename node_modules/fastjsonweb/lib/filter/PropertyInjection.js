PropertyInjection = function(){};

Object.defineProperty(PropertyInjection,"isArray",{
    value:function(obj){
      return Object.prototype.toString.call(obj).slice(8,-1) === "Array";
    }
});

Object.defineProperty(PropertyInjection,"isObject",{
    value:function(obj){
      return Object.prototype.toString.call(obj).slice(8,-1) === "Object";
    }
});

Object.defineProperty(PropertyInjection,"getObjectType",{
    value:function(obj){
      return Object.prototype.toString.call(obj).slice(8,-1);
    }
});


//when object is null  or  undefined or  {} return true
Object.defineProperty(PropertyInjection,"isEmptyObject",{
    value:function(obj){
        if(obj === null || obj === undefined){
            return true;
        }
        for(x in obj){
          return false;
        }
        return true;
    }
});

//a.b.c.d = 123; {b:{c:{d:"123"}}}

Object.defineProperty(PropertyInjection,"stringToObject",{
    value:function(str,value){
        var strtmp = str.replace(/\.+/g,'\.');
        var msg;
        //判断 ‘.’ 是否重复或过多
        if(strtmp != str){
            msg = "Warning: There are two or more '.' are together between  at \"" + str+"="+value+"\"";
            console.log(msg);
        }
        var index = str.indexOf('.');
        //判断 ‘.’是否为位于首位或末位
        if(index == 0 || index ==(str.length - 1)){
            msg = "Warning: The first or the last char  is '.' at \"" + str+"\" ";
            console.log(msg);
        }
        // deal with  '.'
        str = strtmp;
        str = str.replace(/^\.|\.$/g,'');

        var arr = str.split('\.');
        var property;
      
        while(property = arr.pop()){
            var object = {};
            object[property] = value;
            value = object;
        }
        return object;
    }
});
Object.defineProperty(PropertyInjection,"parameterToObject",{
    value:function (parameter){
      var propertyObj   = {};
      if(this.isEmptyObject(parameter)){
        return propertyObj;
      }
      var arrObject = new Array();
      var parameterValue ='';
      for(parameterName in parameter){
          var index = parameterName.indexOf('\.');
          parameterValue = parameter[parameterName];
          if( index == -1){
             propertyObj[parameterName] = parameterValue;
             continue;
           }
           arrObject.push(this.stringToObject(parameterName,parameterValue));
      }
      
      arrObject.push(propertyObj);
      return this.unionObjectFromArray(arrObject);
    }
});

Object.defineProperty(PropertyInjection,"compareObjectsType",{
    value:function(firstObj,secondObj){
      if(this.getObjectType(firstObj) ===  this.getObjectType(secondObj)){
          if(this.isArray(firstObj)){
              return firstObj.concat(secondObj);
          }
          if(this.isObject(firstObj)){
              return this.unionParameterObjects(firstObj,secondObj);
          }
          return firstObj ;
      }
      if(this.isObject(firstObj) && !this.isObject(secondObj)){
          return firstObj;
      }
      if(this.isObject(secondObj) && !this.isObject(firstObj)){
          return secondObj;
      }
      if(this.isArray(firstObj) && !this.isArray(secondObj)){
          return firstObj;
      }
      if(this.isArray(secondObj) && !this.isArray(firstObj)){
          return secondObj;
      }
      return firstObj;
    }
});

//求两个对象并集 
//具有相同参数时
/*
  值数据类型相同时：
    值为数组时则取合集
    值为对象时 继续求合集
    其他类型 取任意一个
  值数据类型不同时：
    一个为数组一个为对象时，对象优先
    字符串类型（包括数字，boolea值，Date）优先级最低。取任意一个
*/
Object.defineProperty(PropertyInjection,"unionParameterObjects",{
    value:function(firstObj,secondObj){
        if(this.isEmptyObject(secondObj)){
            return firstObj;
        }
        if(this.isEmptyObject(firstObj)){
            return secondObj;
        }
        var unionObj = {};
        for(x in firstObj){
            if(!(x in secondObj)){
                unionObj[x] = firstObj[x];
                continue;
            }
            unionObj[x] = this.compareObjectsType(firstObj[x],secondObj[x]);
        }
        for(y in secondObj){
            if(!(y in firstObj)){
                unionObj[y ] = secondObj[y];
                continue;
            }
        }
        return unionObj;
    }
});


//求一组对象的并集
Object.defineProperty(PropertyInjection,"unionObjectFromArray",{
  value:function(arrObj){
      if(!arrObj || arrObj.length == 0){
        return {};
      }
      if(arrObj.length == 1){
        return arrObj[0];
      }
      var length = arrObj.length;

      var objs = new Array();
      for(i = 0;i < length - 1;i = i+2){
        objs.push(this.unionParameterObjects(arrObj[i],arrObj[i+1]));
      }
      if(length%2 != 0){
        objs.push(arrObj[length-1]);
      }
      return this.unionObjectFromArray(objs);
  }
});



//求两个对象并集 //具有相同参数时，以secondObj 优先
Object.defineProperty(PropertyInjection,"unionParameter",{
    value:function(firstObj,secondObj){
      if(this.isEmptyObject(secondObj)){
          return this.parameterToObject(firstObj);
      }
      if(this.isEmptyObject(firstObj)){
          return this.parameterToObject(secondObj);
      }
      for(x in firstObj){
          if(x in secondObj){
              continue;
          }
          secondObj[x] = firstObj[x];
      }
      return this.parameterToObject(secondObj);
    }
});

module.exports = PropertyInjection;