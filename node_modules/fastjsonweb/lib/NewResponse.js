var mime = require('./mime').types;
var Engine = require('./renderedEngine').ViewEngine;
var path = require('path');
var fs = require('fs');
function NewResponse(response){
	this.data = {
		type:"TXT",
		header:{},
		status:200
		/*
		filesetting: { 
			download: true or false,  false:open the file on brower(if brower can);true,download this file,default false
			filename: string,
			fileType: string, //JSON,TXT,JPG
			applicationType:string, //application/msword 
		}
		*/
	};
	this.setResponseType = function(type){
		this.data.type = type;
	};
	this.setHeader = function(key,value){
		this.data.header[key] = value;
	};
	this.setStatus = function(code){
		this.data.status = (typeof code === "number" || +code == code )? +code : 200;
	}
	this.write = function(content,type){
		if(type && typeof type === "string") this.data.type = type.toLocaleUpperCase();
		for(headinfo in this.data.header){
			response.setHeader(headinfo,this.data.header[headinfo]);
		}
		if(typeof content === "undefined"){
			response.end();
			return;
		}
		var respContent = typeof content === "string" ? content : JSON.stringify(content);
		response.writeHead(this.data.status,{
		//	'Content-Length':respContent.length,
			'Content-Type' : mime[this.data.type]
		});
		response.write(respContent);
		response.end();
	};
	this.writeToFileByReadableStream = function(readableStream,filesetting){ //写文件
		for(headinfo in this.data.header){
			response.setHeader(headinfo,this.data.header[headinfo]);
		}
		var openmethed = filesetting.download ? "attachment" : "inline";
		response.setHeader("Content-Disposition", openmethed+";filename=\""   +   filesetting.filename   +   "\"");
		//Set the file type
		var contentType = "";
		if(filesetting.fileType && typeof filesetting.fileType === "string"){
			contentType =  mime[filesetting.fileType.toLocaleUpperCase()];
		}
		if(filesetting.applicationType && typeof filesetting.applicationType === "string"){
			contentType = filesetting.applicationType;
		}

		if(!contentType || !contentType.length){
			contentType = "application/octet-stream";
		}
		response.writeHead(200, {"Content-Type": contentType});
		readableStream.pipe(response);
		readableStream.on("end", function() {
			response.end();
		});
	};
    /*	
	this.writeToFileByPath = function(path,filesetting){
		for(headinfo in this.data.header){
			response.setHeader(headinfo,this.data.header[headinfo]);
		}
		var openmethed = filesetting.download ? "attachment" : "inline";
		response.setHeader("Content-Disposition", openmethed+";filename=\""   +   filesetting.filename   +   "\"");
		//Set the file type
		var contentType = "";
		if(filesetting.fileType){
			contentType =  mime[filesetting.fileType];
		}
		if(filesetting.applicationType){
			contentType = filesetting.applicationType;
		}

		if(!contentType || !contentType.length){
			contentType = "application/octet-stream";
		}
		var fs = require('fs');
		fs.exists(path, function(exists) {
			console.log("exists: ", exists);
			if (exists) {
				var fileStream = fs.createReadStream(path);
				response.writeHead(200, {"Content-Type": contentType});
				fileStream.pipe(response);
				fileStream.on("end", function() {
					response.end();
				})
			}else{
				response.writeHead(200, {"Content-Type": "text/plain"});
				response.end("Not File");
			}
		});
	};
	*/
	this.getResponse = function(){
		return response;
	};
	this.end = function(){
		for(headinfo in this.data.header){
			response.setHeader(headinfo,this.data.header[headinfo]);
		}
		response.end();
	},
  this.render = function(relativepath,locals){
      for(headinfo in this.data.header){
			  response.setHeader(headinfo,this.data.header[headinfo]);
		  }
      var engine = new Engine();
      var realpath = path.join(process.cwd(),engine.getViewEngineViewPath());
      var filename = path.join(realpath,relativepath)+"."+engine.getViewEngineSuffix();
      fs.exists(filename, function(exists) {
			    if (exists) {
				    fs.readFile(filename, 'utf8', function (err, data) {
                if (err) throw err;
                response.writeHead(200, {"Content-Type": "text/html"});
	              response.write(engine.render(data,locals));
                response.end();
            });
			    }else{
				    response.writeHead(200, {"Content-Type": "text/plain"});
				    response.end("Not File");
			    }
		  });
  }
	
}
module.exports = NewResponse;
