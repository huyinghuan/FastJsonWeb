var Log  = {};
/*
*默认配置
*/
Object.defineProperty(Log,"_config",{
  value:{
    "logDateformat":"yyyy-MM-dd hh:mm:ss",//日志输出时的时间格式
    "fileDateformat":"yyyy-MM-dd",//配置日志文件名采用通用的日期格式化模式
    "method4Server":"log2terminal",//设置默认服务端的日志记录方式 [log2txt,log2terminal]
    "method4Client":"log2Console",//设置客户端控制台打印格式 //该属性不可配置
    "logRate":false,  //日志是否分级显示(waring,error,normal分文件记录) 默认为true
    "logDir":false  //设置录log存储位置  如果没有进行设置，则记录在meteor工程目录下的log文件夹中
  }
});

/*
*默认配置所在文件位置
*/
Object.defineProperty(Log,"_path",{
  "value":"log.json",
  "writable": true,
});

Object.defineProperty(Log,"mkdir",{
  value:function(dirpath,dirname){
    var fs = Npm.require("fs");
    var path = Npm.require('path');
    //判断是否是第一次调用
    if(typeof dirname === "undefined"){ 
      if(fs.existsSync(dirpath)){
        return;
      }else{
        arguments.callee(dirpath,path.dirname(dirpath));
      }
    }else{
      //判断第二个参数是否正常，避免调用时传入错误参数
      if(dirname !== path.dirname(dirpath)){ 
        arguments.callee(dirpath);
        return;
      }
      if(fs.existsSync(dirname)){
        fs.mkdirSync(dirpath)
      }else{
        arguments.callee(dirname,path.dirname(dirname));
        fs.mkdirSync(dirpath);
      }
    }
  }
});
/**
  输出日志到控制台  Server | Client
*/
Object.defineProperty(Log,"log2Console",{
  value:function(text,level,stack){
    console.log(Log.getHeader(level,stack));
    console.log(text);
  }
});
/**
  输出日志到终端   Server
*/
Object.defineProperty(Log,"log2terminal",{
  value:function(text,level,stack){
    text = JSON.stringify(text).replace(/\\\"/g,"\'")
    var context = Log.getHeader(level,stack)+text;
    console.log(context);
  }
});

/**
  输出日志到txt文件  Server  X
*/
Object.defineProperty(Log,"log2txt",{
  value:function(text,level,stack){
      var fs = Npm.require('fs');
      var path = Npm.require('path');
      text = JSON.stringify(text).replace(/\\\"/g,"\'");
      var logDir = Log.getConfigByName("logDir")
      Log.mkdir(logDir);
      var fullpath =  path.join(logDir,Log.getLogFileName(level));
      var context = Log.getHeader(level,stack)+text+"\n";
      fs.appendFile(fullpath,context, function (err) {
          if (err) throw err;
      });
  }
});

/**
  获取日志文件名
*/
Object.defineProperty(Log,"getLogFileName",{
  value:function(level){
      var filename = new Date().format(Log.getConfigByName("fileDateformat"));
        return Log.getConfigByName("logRate")
                ? filename+"_"+Log.getLevel(level)+".log"
                : filename+".log"
  }
});


/*
*获取日志级别
*/
Object.defineProperty(Log,"getLevel",{
  value:function(level){
    var levelInfo = "";
    switch(level){
        case -1:levelInfo = "ERROR";break;
        case 0 :levelInfo = "WARNNING";break;
        default:levelInfo = "NORMAL";break;
    }
    return levelInfo;
  }
});

/*
*设置日志信息每行开始部分的资料
*/
Object.defineProperty(Log,"getHeader",{
  value:function(level,stack){
    if(typeof level === "undefined" || typeof level !== "number") 
       level = 1;
    var date = new Date().format(Log.getConfigByName("logDateformat"));
    var levelInfo = Log.getLevel(level);
    return (date + "  " + levelInfo + ":"+stack+"\n")
  }
});

/*
* 设置配置在资源文件夹中的位置
*/
Object.defineProperty(Log,"setConfigPath",{
  value:function(config){
      Log._path = config;
  }
});

/*
* 获取某个配置信息
*/
Object.defineProperty(Log,"getConfigByName",{
  value:function(name){
      if(Meteor.isClient){
        return Log._config[name];
      }
      var path = Log._path;
      var config = {};
      try{
          config = EJSON.parse(Assets.getText(path));
      }catch(e){
        console.log(e);
        console.error(path+"日志配置文件不存在,请检查/private下是否存在此文件");
        config = Log._config;
      }
      if(name === "logDir" && !config[name])
          return EccSystem.getRootPath("log");
      return config[name] ? config[name] : Log._config[name];
  }
});
/*
*公开的方法
*/
Object.defineProperty(Log,"print",{
    value:function(text,level,stack){
       if(Meteor.isClient){
          Log[Log.getConfigByName("method4Client")].apply(null,arguments);
        }else if(Meteor.isServer){
          Log[Log.getConfigByName("method4Server")].apply(null,arguments);
        }
    }
});

//debug级别 ：level，-1表示错误，0表示警告，1表示一般提示信息  默认为1
//日志记录 方式1
//已过时
SystemLogger = function(obj,level){
  var err = new Error();
  var stack = err.stack;
  stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
  var arr = stack.split('\n');
  Log.print(obj,level,arr[1]);
}
/**
    Type:fix bug
    Author:huyinghuan
    Date:2013-10-24 10:06
    Content:优化 对象构建
    ***不写配置属性则默认为false
    ========================
    Type:add
    Author:huyinghuan
    Date:2013-11-08 13:061
    Content:增加函数使用说明
**/
/*
*Log4js 函数:
setConfigPath
   功能：设置Log的配置文件位置
   参数:path  type:string ,该路径为相对路径。其根目录为/private  
      若不调用该函数设置Log的配置文件路径，则默认读取/private/log.json.
      若该/private/log.json文件不存在,则调用默认设置 详情请查看Log的_config
      /private/log.json为一个json 字符串,详情请查看Log的_config
info
  功能：记录一般信息
  参数:context type:object;
warn
  功能：记录警告信息信息
  参数:context type:object;
error
  功能：记录错误信息信息
  参数:context type:object;
*
*/
//日志记录 方式2
Log4js = {};
Object.defineProperties(Log4js,{
  "info":{
    "value":function(context){
      var err = new Error();
      var stack = err.stack;
      stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
      var arr = stack.split('\n');
      Log.print(context,1,arr[1]);
    },
    "writable": false,
    "enumerable": false,
    "configurable": false
  },
  "warn":{
    "value":function(context){
      var err = new Error();
      var stack = err.stack;
      stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
      var arr = stack.split('\n');
      Log.print(context,0,arr[1]);
    }
  },
  "error":{
    "value":function(context){
      var err = new Error();
      var stack = err.stack;
      stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
      var arr = stack.split('\n');
      Log.print(context,-1,arr[1]);
    }
  },
  "setConfigPath":{
    "value":function(path){
      Log.setConfigPath(path);
    }
  }
});