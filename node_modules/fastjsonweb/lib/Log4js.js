var fs = require("fs");
var path = require('path');
var getLogConfig = require("./ConfigHelper").getLogConfig;
var Log  = {};

/*
*默认配置所在文件位置
*/
Object.defineProperty(Log,"_path",{
  "value":"log.json",
  "writable": true,
});
//make directory for log file 
Object.defineProperty(Log,"mkdir",{
  value:function(dirpath,dirname){
    //whether the first be called
    if(typeof dirname === "undefined"){ //first call
      if(fs.existsSync(dirpath)){
        return;
      }else{
        arguments.callee(dirpath,path.dirname(dirpath));
      }
    }else{
      if(dirname !== path.dirname(dirpath)){ 
        arguments.callee(dirpath);
        return;
      }
      if(fs.existsSync(dirname)){
        fs.mkdirSync(dirpath)
      }else{
        arguments.callee(dirname,path.dirname(dirname));
        fs.mkdirSync(dirpath);
      }
    }
  }
});

/**
  Log to log2terminal
*/
Object.defineProperty(Log,"log2terminal",{
  value:function(text,level,stack){
    text = JSON.stringify(text).replace(/\\\"/g,"\'")
    var context = Log.getHeader(level,stack)+text;
    console.log(context);
  }
});

/**
  输出日志到txt文件
*/
Object.defineProperty(Log,"log2txt",{
  value:function(text,level,stack){
      var fs = Npm.require('fs');
      var path = Npm.require('path');
      text = JSON.stringify(text).replace(/\\\"/g,"\'");
      var logDir = Log.getConfigByName("logDir")
      Log.mkdir(logDir);
      var fullpath =  path.join(logDir,Log.getLogFileName(level));
      var context = Log.getHeader(level,stack)+text+"\n";
      fs.appendFile(fullpath,context, function (err) {
          if (err) throw err;
      });
  }
});

/**
  获取日志文件名
*/
Object.defineProperty(Log,"getLogFileName",{
  value:function(level){
      var filename = new Date().format(Log.getConfigByName("fileDateformat"));
        return Log.getConfigByName("logRate")
                ? filename+"_"+Log.getLevel(level)+".log"
                : filename+".log"
  }
});


/*
*获取日志级别
*/
Object.defineProperty(Log,"getLevel",{
  value:function(level){
    var levelInfo = "";
    switch(level){
        case -1:levelInfo = "ERROR";break;
        case 0 :levelInfo = "WARNNING";break;
        default:levelInfo = "NORMAL";break;
    }
    return levelInfo;
  }
});

/*
*set every line the header ,include the log time,log level and the file line; 
*/
Object.defineProperty(Log,"getHeader",{
  value:function(level,stack){
    if(typeof level === "undefined" || typeof level !== "number") 
       level = 1;

    var header = "";
    var headerConfig =  Log.getConfigByName("headerInfo");
    if(headerConfig.time)
      header = new Date().format(Log.getConfigByName("logDateformat")) + "  ";
    if(headerConfig.level)
      header = header + Log.getLevel(level) + "  ";
    if(headerConfig.statck)
       header = header + stack;
    return header
  }
});


/*
* 获取某个配置信息
*/
Object.defineProperty(Log,"getConfigByName",{
  value:function(name){
    return getLogConfig(name);
  }
});

Object.defineProperty(Log,"print",{
    value:function(text,level,stack){
          Log[Log.getConfigByName("method")].apply(null,arguments);
    }
});

/*
info
  log normal information
  parameters:
    context  type:object;

warn
  log warning information
  parameters:
    context  type:object;

error
  log error information
  parameters:
    context  type:object;
*/
var Log4js = {};
Object.defineProperties(Log4js,{
  "info":{
    "value":function(context){
      var err = new Error();
      var stack = err.stack;
      stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
      var arr = stack.split('\n');
      Log.print(context,1,arr[1]);
    }
  },
  "warn":{
    "value":function(context){
      var err = new Error();
      var stack = err.stack;
      stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
      var arr = stack.split('\n');
      Log.print(context,0,arr[1]);
    }
  },
  "error":{
    "value":function(context){
      var err = new Error();
      var stack = err.stack;
      stack = stack.replace(/^Error(\s)*/,"").replace(/\?(\w)+\:/g," ");
      var arr = stack.split('\n');
      Log.print(context,-1,arr[1]);
    }
  }
});


module.exports = Log4js;